/*
01 객체지향 프로그래밍의 시작

왜 객체지향 프로그래밍을 배워야 할까
"객체를 기본 단위로 해서 만들기"
크고 견고한 프로그램을 만들기 위해는 진보된 프로그래밍 방법이 필요.
만들어진 프로그램을 보수하거나 개서하는데 있어서도 보다 적은 노력을 필요
객체지향 프로그래밍은 현재 전세계적으로 가장많이 사용하는 프로그래밍 방법이며 가장 효율적.

객체지향 프로그래밍의 비유
규격화된 부품을 조립해서 완제품을 생산하는 공정.
각 기능은 담당 개발자나 팀에 의해서 별도로 개발되며 최종적으로 한곳에 모여서 조립된다.
각각의 기능들은 '객체'가 된다.
1)자신이 만들고 있는 부품에만 노력을 집중할 수 있다.
2)출시한 완제품에 문제가 생기더라도 해당 부품만 교체해주면 된다.
3)부품들은 다른 제품을 만드는데도 사용할 수 있다.

적어도 부품간에 연결되는 부분은 서로 약속이 되어 있어야 한다.
블록끼리 끼워지는 부분에 있어서는 동일한 규격을 사용하고 있다.
객체간에 연결되는 부분은 서로 약속이 되어 있어야 한다.
이렇게 약속된 부분을 '인터페이스'라고 한다.

인터페이스(Interface)
접촉면, 공통 사항, 중개 장치.
예로 리모컨, 키보드마우스 ...
함수 원형도 인터페이스가 된다.
함수 A와 함수 B가 통신을 하는 접촉면은 함수 B의 원형이다.
내용이 바뀌면 결과가 달라지지만 원형이 바끼면 새로 작성해야 한다.

클래스와 객체 그리고 나머지 용어들
클래스와 객체
Class와 Object는 '붕어빵 틀'과 '붕어빵'에 관계
클래스는 구조체와 거의 같은 개념.
우리가 어떤 클래스를 만들어서 정의하면, 그 클래스는 새로운 타입이 되는 것이다.
그리고 이 새로운 타입을 사용해서 정의한 변수는 객체가 된다.
객체는 멤버들을 사용해서 자기가 맡은 임무를 수행할 수 있다.
객체는 설계도를 통해서 만들어진 인스턴스고 실제로 메모리에 자리를 잡는다.

구조체도 함수를 멤버로 가질 수 있다
C에서는 변수만을 멤버로 가질 수 있다. 호환성 때문에 C++에서도 잘 사용하지 않는다.

정보 은닉과 캡슐화
정보 은닉
Data Hiding은 정보를 숨긴다는 의미.
다른 객체의 내부구현을 반드시 몰라야 한다.
다른 객체의 내부 구현을 알고, 그 사실에 의존해서 객체를 만들게 되면 반드시 문제가 발생.
즉, 서로 약속되어있는 부분이 아니랴면 보여주지도 말고 보지도 말자.
캡슐화
Encapsulation 약속된 부분을 제외한 나머지 부분을 캡슐로 감싸서 숨겨버리는 것.
텔레비전 속에는 많은 장치들이 있겠지만 케이스로 쌓여있어 특정 단추들만 보임.
캡슐화를 사용해서 정보 은닉을 달성할 수 있다.
객체간에 약속한 부분만 드러나게 하고, 나머지는 캡슐로 감싸서 못보게 한다.

C++에서는 정보은닉이나 캡슐화에 1:1로 매치되는 기능은 가지고 있지 않다.
하지만 클래스에 멤버 변수나 멤버함수를 정의하면서, 보이게 할지에 대한 여부를 지정할 수 있다.

상속과 다형성
Inheritance는 기존의 클래스를 토대로 해서 새로운 클래스를 만드는 방법.
클래스를 조금 고쳐서 새로운 클래스를 만들고 싶을 때 상속을 사용할 수 있다.
클래스 A가 클래스 B를 상속 받게 만들면, 클래스B는 '부모클래스' 클래스 A는 '자식클래스'
부모클래스는 자식클래스에게 자신의 모든 멤버 변수와 함수를 물려준다.
상속의 개념은 객체지향 프로그래밍에 재사용성(Reusability)를 더해준다.
다형성
서로 약속된 부분만 그대로 유지한다면 얼마든지 다른 종류의 부품으로 갈아 끼울 수 있다.
객체와 객체가 서로 약속한 부분, 인터페이스만 그대로 유지한다면 얼마든지 다른객체로 바꿀수있다.

조립식에 경우 고장이 났을 때 해당 부품만 교체하면 되는 장점. 해당 객체만 교체하면 된다.
여러 객체가 서로 맞물려 있는 상태에서 다른 객체들 모르게 어느 한 객체만 교체하기 위해 다형성.

*/